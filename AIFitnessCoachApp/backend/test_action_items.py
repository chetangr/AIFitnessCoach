#!/usr/bin/env python3
"""
Test if action items are being generated by the backend
"""

import requests
import json
from datetime import datetime

BASE_URL = "http://localhost:8000"

def test_action_generation():
    """Test various queries to see if action items are generated"""
    
    # Test queries that should generate action items
    test_queries = [
        {
            "message": "I want to increase the difficulty of my workouts",
            "expected_actions": ["add_workout", "modify_workout", "schedule_workout"]
        },
        {
            "message": "My knee hurts during squats",
            "expected_actions": ["modify_workout", "substitute_exercises", "schedule_rest"]
        },
        {
            "message": "Can you create a new workout plan for me?",
            "expected_actions": ["create_workout", "schedule_workout"]
        },
        {
            "message": "I need help with my nutrition",
            "expected_actions": ["create_meal_plan"]
        }
    ]
    
    for test in test_queries:
        print(f"\n{'='*60}")
        print(f"Testing: {test['message']}")
        print(f"Expected actions: {test['expected_actions']}")
        print(f"{'='*60}")
        
        # Add context for better responses
        context = {
            "date": datetime.now().isoformat(),
            "day_of_week": datetime.now().strftime('%A'),
            "current_workout": {
                "title": "Leg Day",
                "exercises": ["Squats", "Lunges", "Leg Press"]
            }
        }
        
        payload = {
            "message": test['message'],
            "context": context,
            "personality": "supportive"
        }
        
        try:
            response = requests.post(f"{BASE_URL}/api/multi-agent/chat/demo", json=payload)
            if response.status_code == 200:
                data = response.json()
                
                print(f"\nPrimary message preview: {data['primary_message'][:100]}...")
                print(f"Number of responding agents: {len(data.get('responding_agents', []))}")
                print(f"Number of action items: {len(data.get('action_items', []))}")
                
                if data.get('action_items'):
                    print("\nAction items generated:")
                    for action in data['action_items']:
                        print(f"  - Type: {action.get('type')}")
                        print(f"    Label: {action.get('label')}")
                        print(f"    Icon: {action.get('icon')}")
                        print(f"    Color: {action.get('color')}")
                else:
                    print("\n❌ No action items generated!")
                    
                if data.get('consensus_recommendations'):
                    print("\nConsensus recommendations:")
                    for rec in data['consensus_recommendations']:
                        print(f"  - {rec}")
                        
            else:
                print(f"❌ Error: {response.status_code}")
                print(response.text)
                
        except Exception as e:
            print(f"❌ Request failed: {e}")

if __name__ == "__main__":
    print("Testing Action Item Generation")
    print("==============================")
    test_action_generation()